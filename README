Java8 Interview Question
Conceptual Questions 
1. What are the main features introduced in Java 8?
 ● Lambda Expressions  : Enable functional programming  by writing functions inline.
 ● Stream API  : Process collections in a functional style.
 ● Functional Interfaces  : Interfaces with a single abstract  method (e.g.,  Predicate ,
 Function  ).
 ● Optional  : Avoid  NullPointerException .
 ● Default Methods  : Add default implementations in interfaces.
 ● Date and Time API  : Improved handling of dates and  times.
 ● Method References  : Simplified syntax for calling methods.

 2. What are functional interfaces?
 ● Functional interfaces have exactly one abstract method.
 ● Support lambda expressions and method references.
 ● Examples:
 ○ Runnable  (  void run()  )
 ○ Predicate<T>  (  boolean test(T t)  )
 ○ Function<T, R>  (  R apply(T t)  )

 3. Explain  Stream  and its key methods.
 ● A  Stream  represents a sequence of elements for processing.
 ● Intermediate Operations  (return a Stream):
 ○ filter()  : Filter elements based on a condition.
 ○ map()  : Transform elements.
 ○ sorted()  : Sort elements.
 ● Terminal Operations  (consume the Stream):
 ○ collect()  : Convert to a collection.
 ○ forEach()  : Perform an action.
 ○ reduce()  : Aggregate elements.

4. What is the difference between  map()  and  flatMap()  ? 
●  map()  : Transforms each element, returning a stream  of streams. 
●  flatMap()  : Transforms and flattens nested structures  into a single stream. 

5. What is  Optional  in Java 8? 
●  Used to avoid  NullPointerException  . 
●  Methods: 
○  of(value)  : Create an  Optional  with a non-null value. 
○  empty()  : Create an empty  Optional  . 
○  ifPresent()  : Perform an action if a value is present. 

6. How do  default  methods work in interfaces? 
●  Add new methods to interfaces with a default implementation. 
Example: 
interface MyInterface { 
default void show() { 
System.out.println("Default Method"); 
} 
} 

7. What is the purpose of  Collectors  ? 
●  Collectors  is a utility for reducing streams. 
●  Common collectors: 
○  toList()  ,  toSet()  : Convert to a list or set. 
○  joining()  : Concatenate strings. 
○  groupingBy()  : Group elements by a key. 
○  partitioningBy()  : Partition elements into two groups. 

8. How does the Date and Time API differ from  java.util.Date  ? 
●  Immutable and thread-safe classes:  LocalDate  ,  LocalTime  ,  LocalDateTime  . 
●  DateTimeFormatter  for parsing and formatting. 
●  Zone-aware classes like  ZonedDateTime . 

9. What are method references in Java 8? 
●  A shorthand for lambda expressions. 
●  Types: 
○  Static methods:  Class::methodName 
○  Instance methods:  instance::methodName 
○  Constructors:  ClassName::new 

10. What is  parallelStream()  in Java 8? 
●  Processes elements in parallel for better performance in large datasets. 
Example: 
List<Integer> numbers = Arrays.asList(1, 2, 3); 
numbers.parallelStream().map(n -> n * 2).forEach(System.out::println);
